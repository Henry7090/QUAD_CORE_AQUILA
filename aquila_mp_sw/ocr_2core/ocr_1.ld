/*
// =============================================================================
//  Program : ocr.ld
//  Author  : Chun-Jen Tsai
//  Date    : Dec/06/2023
// -----------------------------------------------------------------------------
//  Revision information:
//
//  None.
// -----------------------------------------------------------------------------
//  Description:
//  This is the linker script of a program compiled to run from DDRx memory.
// -----------------------------------------------------------------------------
//  License information:
//
//  This software is released under the BSD-3-Clause Licence,
//  see https://opensource.org/licenses/BSD-3-Clause for details.
//  In the following license statements, "software" refers to the
//  "source code" of the complete hardware/software system.
//
//  Copyright 2019,
//                    Embedded Intelligent Systems Lab (EISL)
//                    Deparment of Computer Science
//                    National Chiao Tung Uniersity
//                    Hsinchu, Taiwan.
//
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//  1. Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//
//  2. Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//
//  3. Neither the name of the copyright holder nor the names of its contributors
//     may be used to endorse or promote products derived from this software
//     without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
// =============================================================================
*/

__stack_size = 0x800;
__heap_size  = 0x200000;

MEMORY
{
    /*code_ram         (rx!rw) : ORIGIN = 0x80011000, LENGTH = 0x10000
    rodata_ram       (rw!x)  : ORIGIN = 0x80051000, LENGTH = 0x30000
    global_data_ram  (rw!x)  : ORIGIN = 0x80081000, LENGTH = 0x10000
    heap_data_ram    (rw!x)  : ORIGIN = 0x80091000, LENGTH = 0x210000
    private_data_ram (rw!x)  : ORIGIN = 0x80501000, LENGTH = 0x210000*/
    
    /*code_ram         (rx!rw) : ORIGIN = 0x800a1000, LENGTH = 0x50000
    rodata_ram       (rw!x)  : ORIGIN = 0x800f1000, LENGTH = 0x50000
    global_data_ram  (rw!x)  : ORIGIN = 0x80151000, LENGTH = 0x10000
    heap_data_ram    (rw!x)  : ORIGIN = 0x80161000, LENGTH = 0x210000
    private_data_ram (rw!x)  : ORIGIN = 0x80701000, LENGTH = 0x210000*/

    code_ram         (rx!rw) : ORIGIN = 0x80801000, LENGTH = 0x50000
    rodata_ram       (rw!x)  : ORIGIN = 0x80851000, LENGTH = 0x50000
    global_data_ram  (rw!x)  : ORIGIN = 0x80951000, LENGTH = 0x10000
    heap_data_ram    (rw!x)  : ORIGIN = 0x80961000, LENGTH = 0x210000
    private_data_ram (rw!x)  : ORIGIN = 0x80C01000, LENGTH = 0x210000
}

ENTRY(crt1)

SECTIONS
{
    .text :
    {
        *(.text*)
    } > code_ram

    .rodata : 
    {
        *(.rodata*)
    } > rodata_ram

    .data :
    {
        *(.data)
        *(.bss)
    } > global_data_ram

    .heap : ALIGN(0x10)
    {
        __heap_start = .;
        . += __heap_size;
    } > heap_data_ram

    .stack : ALIGN(0x10)
    {
        . += __stack_size;
        __stack_top = .;
    } > private_data_ram
}

